<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="metis.app.pmsWeb.domain.chargeDischargeStatistic.ChargeDischargeStatisticMapper">

    <select id="selectChargeDischargeDailyStatisticList" resultType="Hashmap" parameterType="Hashmap" statementType="PREPARED">
        SELECT CONCAT(DATE_TABLE.STATISTICS_START_TIME,':00','~',DATE_TABLE.STATISTICS_END_TIME,':00')                       AS label,
               DATE_FORMAT(FROM_UNIXTIME(A.REG_DATE), '%Y-%m-%d %H:%i:%s')                                                   AS regDate,
               IF(A.ACCUMULATED_CHARGE IS NOT NULL, IF(A.ACCUMULATED_CHARGE != 0, A.ACCUMULATED_CHARGE, 0.0), 0.0)           AS accumulatedCharge,
               IF(A.ACCUMULATED_DISCHARGE IS NOT NULL, IF(A.ACCUMULATED_DISCHARGE != 0, A.ACCUMULATED_DISCHARGE, 0.0), 0.0)  AS accumulatedDischarge
        FROM (
            SELECT '00' as STATISTICS_START_TIME, '01' as STATISTICS_END_TIME UNION ALL SELECT '01' , '02' UNION ALL SELECT '02', '03' UNION ALL
            SELECT '03','04' UNION ALL SELECT '04','05' UNION ALL SELECT '05','06' UNION ALL SELECT '06','07' UNION ALL SELECT '07','08' UNION ALL
            SELECT '08','09' UNION ALL SELECT '09','10' UNION ALL SELECT '10','11' UNION ALL SELECT '11','12' UNION ALL SELECT '12','13' UNION ALL
            SELECT '13','14' UNION ALL SELECT '14','15' UNION ALL SELECT '15','16' UNION ALL SELECT '16','17' UNION ALL SELECT '17','18' UNION ALL
            SELECT '18','19' UNION ALL SELECT '19','20' UNION ALL SELECT '20','21' UNION ALL SELECT '21','22' UNION ALL SELECT '22','23' UNION ALL SELECT '23','00'
            ) DATE_TABLE
        LEFT JOIN (
            SELECT REG_DATE,
                   STATISTICS_START_TIME,
                   STATISTICS_END_TIME,
                   ACCUMULATED_CHARGE,
                   ACCUMULATED_DISCHARGE
            FROM statics_energy_daily
            WHERE DATE_FORMAT(FROM_UNIXTIME(REG_DATE - 3600), '%Y-%m-%d') = #{searchDate}
            ) A
        ON DATE_TABLE.STATISTICS_START_TIME = A.STATISTICS_START_TIME
        AND DATE_TABLE.STATISTICS_END_TIME = A.STATISTICS_END_TIME
        ORDER BY label
    </select>
    <select id="selectChargeDischargeMonthlyStatisticList" resultType="Hashmap" parameterType="Hashmap" statementType="PREPARED">
        SELECT CONCAT(RIGHT(DATE_TABLE.date, 2), '일')                                                                       AS label,
               DATE_FORMAT(FROM_UNIXTIME(A.REG_DATE), '%Y-%m-%d %H:%i:%s')                                                  AS regDate,
               IF(A.ACCUMULATED_CHARGE IS NOT NULL, IF(A.ACCUMULATED_CHARGE != 0, A.ACCUMULATED_CHARGE, 0.0), 0.0)          AS accumulatedCharge,
               IF(A.ACCUMULATED_DISCHARGE IS NOT NULL, IF(A.ACCUMULATED_DISCHARGE != 0, A.ACCUMULATED_DISCHARGE, 0.0), 0.0) AS accumulatedDischarge
        FROM (
            SELECT DATE_FORMAT(a.date_ymd,'%Y%m%d' ) as date
            FROM (
	            SELECT DATE_FORMAT(LAST_DAY(CONCAT(#{searchDate},'-01')), '%Y-%m-%d') - INTERVAL (a.a + (10 * b.a) + (100 * c.a)) DAY as date_ymd
	            FROM (
		            SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
		            UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9
	            ) AS a
	            CROSS JOIN (
		            SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
		            UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9
	            ) AS b
	            CROSS JOIN (
		            SELECT 0 as a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
		            UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9
	            ) AS c
            ) AS a
            WHERE 1 = 1
            AND  a.date_ymd >= DATE_FORMAT(CONCAT(REPLACE(#{searchDate},'-',''),'01'), '%Y-%m-%d')
        ) AS DATE_TABLE
        LEFT JOIN (
            SELECT REG_DATE,
                   STATISTICS_DAY,
                   ACCUMULATED_CHARGE,
                   ACCUMULATED_DISCHARGE
            FROM statics_energy_monthly
            WHERE DATE_FORMAT(FROM_UNIXTIME(REG_DATE - 3600), '%Y-%m') = #{searchDate}
           ) A
        ON 1 = 1
        AND RIGHT(DATE_TABLE.date,2) = A.STATISTICS_DAY

        ORDER BY DATE_TABLE.date
    </select>
    <select id="selectChargeDischargeYearlyStatisticList" resultType="Hashmap" parameterType="Hashmap" statementType="PREPARED">
        SELECT CONCAT(DATE_TABLE.date,'월')                                                                                  AS label,
               DATE_FORMAT(FROM_UNIXTIME(A.REG_DATE), '%Y-%m-%d %H:%i:%s')                                                  AS regDate,
               IF(A.ACCUMULATED_CHARGE IS NOT NULL, IF(A.ACCUMULATED_CHARGE != 0, A.ACCUMULATED_CHARGE, 0.0), 0.0)          AS accumulatedCharge,
               IF(A.ACCUMULATED_DISCHARGE IS NOT NULL, IF(A.ACCUMULATED_DISCHARGE != 0, A.ACCUMULATED_DISCHARGE, 0.0), 0.0) AS accumulatedDischarge
        FROM (SELECT '01' as date UNION ALL SELECT '02' UNION ALL SELECT '03' UNION ALL SELECT '04' UNION ALL SELECT '05' UNION ALL SELECT '06'
		       UNION ALL SELECT '07' UNION ALL SELECT '08' UNION ALL SELECT '09' UNION ALL SELECT '10' UNION ALL SELECT '11' UNION ALL SELECT '12') DATE_TABLE
        LEFT JOIN (
            SELECT REG_DATE,
                   STATISTICS_MONTH,
                   ACCUMULATED_CHARGE,
                   ACCUMULATED_DISCHARGE
            FROM statics_energy_yearly
            WHERE 1 = 1
            AND DATE_FORMAT(FROM_UNIXTIME(REG_DATE - 3600), '%Y') = #{searchDate}
            ) A
        ON 1 = 1
        AND DATE_TABLE.date = A.STATISTICS_MONTH
        ORDER BY DATE_TABLE.date
    </select>

    <insert id="insertSummaryBattery15MinuteInfo" parameterType="hashmap" statementType="PREPARED">
        INSERT INTO statics_energy_fifteen_minutes
        (REG_DATE, STATISTICS_START_TIME, STATISTICS_END_TIME, ACCUMULATED_CHARGE, ACCUMULATED_DISCHARGE)

        SELECT UNIX_TIMESTAMP(#{endRegDate}),
               #{measureStartTime},
               #{measureEndTime},
               ROUND(a.batteryChargeAmount,2),
               ROUND(a.batteryDischargeAmount,2)
        FROM (
            SELECT IF(comparison.count = 0, charge.total, IF(comparison.CHARGE_GBN = '1', charge.total - comparison.DIS_CHARGE_SUM_VALUE, charge.total)) batteryChargeAmount,
                   IF(comparison.count = 0, discharge.total, IF(comparison.CHARGE_GBN = '2', discharge.total - comparison.DIS_CHARGE_SUM_VALUE, discharge.total)) batteryDischargeAmount
            FROM (
                SELECT IFNULL(ROUND(SUM(t1.ACCUMULATED_ENERGY), 3), 0) total
                FROM (
                    SELECT MAX(ACCUMULATED_ENERGY) ACCUMULATED_ENERGY
                    FROM history_energy_detail
                    WHERE ENERGY_NO IN (
                        SELECT ENERGY_NO
                        FROM   history_energy
                        WHERE OPERATION_MODE = '1'
                        )
            AND REG_DATE <![CDATA[>=]]> #{startRegDate}
            AND REG_DATE <![CDATA[<]]>  #{endRegDate}
            GROUP BY ENERGY_NO ) t1 ) charge,
            (
             SELECT IFNULL(ROUND(SUM(t1.ACCUMULATED_ENERGY), 3), 0) total
             FROM ( SELECT MAX(ACCUMULATED_ENERGY) ACCUMULATED_ENERGY
                    FROM history_energy_detail
                    WHERE ENERGY_NO IN (
                        SELECT ENERGY_NO
                        FROM   history_energy
                        WHERE OPERATION_MODE = '2'
                        )
            AND REG_DATE <![CDATA[>=]]> #{startRegDate}
            AND REG_DATE <![CDATA[<]]>  #{endRegDate}
            GROUP BY ENERGY_NO) t1 ) discharge,
            (
            SELECT MAX(a.ACCUMULATED_ENERGY) DIS_CHARGE_SUM_VALUE,
                   ( SELECT OPERATION_MODE FROM history_energy WHERE ENERGY_NO = a.ENERGY_NO LIMIT 1 ) CHARGE_GBN,
                   COUNT(*) count
            FROM history_energy_detail a,
                 ( SELECT ENERGY_NO
                   FROM history_energy_detail
                   WHERE REG_DATE <![CDATA[>=]]> #{startRegDate}
                   AND REG_DATE <![CDATA[<]]> #{endRegDate}
                   ORDER BY REG_DATE LIMIT 1 ) b
            WHERE a.ENERGY_NO = b.ENERGY_NO
            AND a.REG_DATE <![CDATA[<]]> #{startRegDate}
            ORDER BY ENERGY_SEQ DESC LIMIT 1 ) comparison
        ) a
    </insert>


    <insert id="insertSummaryBatteryTimeInfo" parameterType="hashmap" statementType="PREPARED">

        INSERT INTO statics_energy_daily
        (REG_DATE, STATISTICS_START_TIME, STATISTICS_END_TIME, ACCUMULATED_CHARGE, ACCUMULATED_DISCHARGE)

            SELECT *

        FROM (
            SELECT IF(EXISTS(SELECT REG_DATE FROM statics_energy_daily WHERE FROM_UNIXTIME(REG_DATE, '%Y%m%d%H') = #{oneHourDate}),
                    (SELECT REG_DATE FROM statics_energy_daily WHERE FROM_UNIXTIME(REG_DATE, '%Y%m%d%H') = #{oneHourDate}), UNIX_TIMESTAMP()) AS regDate,
                    RIGHT(#{oneHourBeforeDate}, 2)                                                                                            AS mesureStartDate,
                    RIGHT(#{oneHourDate}, 2)                                                                                                  AS mesureEndDate,
                    IFNULL(ROUND(SUM(ACCUMULATED_CHARGE),2), 0)                                                                               AS accumulatedCharge,
                    IFNULL(ROUND(SUM(ACCUMULATED_DISCHARGE),2), 0)                                                                            AS accumulatedDischarge

            FROM statics_energy_fifteen_minutes

            WHERE 1 = 1
            AND FROM_UNIXTIME(REG_DATE - 3600, '%Y%m%d') = LEFT(#{oneHourDate},8)
            AND STATISTICS_START_TIME LIKE CONCAT(RIGHT(#{oneHourBeforeDate},2),'%')
        ) AS A

        ON DUPLICATE KEY UPDATE
            ACCUMULATED_CHARGE    = accumulatedCharge
          , ACCUMULATED_DISCHARGE = accumulatedDischarge


    </insert>



    <insert id="insertSummaryBatteryDayInfo" parameterType="hashmap" statementType="PREPARED">

        INSERT INTO statics_energy_monthly
            (REG_DATE, STATISTICS_DAY, ACCUMULATED_CHARGE, ACCUMULATED_DISCHARGE)

        SELECT *

        FROM (
            SELECT IF(EXISTS(SELECT REG_DATE FROM statics_energy_monthly WHERE FROM_UNIXTIME(REG_DATE, '%Y%m%d') = #{oneHourBeforeDate}),
                    (SELECT REG_DATE FROM statics_energy_monthly WHERE FROM_UNIXTIME(REG_DATE, '%Y%m%d') = #{oneHourBeforeDate}), UNIX_TIMESTAMP())    AS regDate,
                    IFNULL(FROM_UNIXTIME(REG_DATE- 3600, '%d'), RIGHT(#{oneHourBeforeDate}, 2))                                                        AS mesureDate,
                    IFNULL(SUM(ACCUMULATED_CHARGE), 0)                                                                                                 AS accumulatedCharge,
                    IFNULL(SUM(ACCUMULATED_DISCHARGE), 0)                                                                                              AS accumulatedDischarge

            FROM statics_energy_daily

            WHERE 1 = 1
            AND FROM_UNIXTIME(REG_DATE - 3600, '%Y%m%d') = #{oneHourBeforeDate}
        ) AS A

        ON DUPLICATE KEY UPDATE
            ACCUMULATED_CHARGE    = accumulatedCharge
          , ACCUMULATED_DISCHARGE = accumulatedDischarge

    </insert>




    <insert id="insertSummaryBatteryMonthInfo" parameterType="hashmap" statementType="PREPARED">

        INSERT INTO statics_energy_yearly
            (REG_DATE, STATISTICS_MONTH, ACCUMULATED_CHARGE, ACCUMULATED_DISCHARGE)


        SELECT *

        FROM (
            SELECT IF(EXISTS(SELECT REG_DATE FROM statics_energy_yearly WHERE FROM_UNIXTIME(REG_DATE, '%Y%m') = #{oneHourBeforeDate}),
                    (SELECT REG_DATE FROM statics_energy_yearly WHERE FROM_UNIXTIME(REG_DATE, '%Y%m') = #{oneHourBeforeDate}), UNIX_TIMESTAMP())  AS regDate,
                    IFNULL(FROM_UNIXTIME(REG_DATE- 3600, '%m'), MID(#{oneHourBeforeDate}, 5, 2))                                                  AS mesureDate,
                    IFNULL(SUM(ACCUMULATED_CHARGE), 0)                                                                                            AS accumulatedCharge,
                    IFNULL(SUM(ACCUMULATED_DISCHARGE), 0)                                                                                         AS accumulatedDischarge

            FROM statics_energy_monthly

            WHERE 1 = 1
            AND FROM_UNIXTIME(REG_DATE - 3600, '%Y%m') = #{oneHourBeforeDate}

        ) AS A

        ON DUPLICATE KEY UPDATE
            ACCUMULATED_CHARGE = accumulatedCharge
          , ACCUMULATED_DISCHARGE = accumulatedDischarge

    </insert>

</mapper>
